/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FaqGUI.java
 *
 * Created on 2011-10-24, 21:25:24
 */
package dms.pastor.tools.nanobackup.GUI;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Properties;


/**
 * @author Pastor
 */
public class FaqGUI extends javax.swing.JFrame {
    private static final Logger LOGGER = LoggerFactory.getLogger(FaqGUI.class);
    private final Properties properties = new Properties();
    private String[] questions = {"Why I don't see FAQ?"};
    private String[] answers = {"It seems like file message.properites was missing , damaged or author of this program forgot update FAQ sections."};
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea answersField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox questionComboBox;

    /**
     * Creates new form FaqGUI
     */
    public FaqGUI() {
        super();
        setup();
        initComponents();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            // java.util.logging.Logger.getLogger(FaqGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            //java.util.logging.Logger.getLogger(FaqGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            //java.util.logging.Logger.getLogger(FaqGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            //java.util.logging.Logger.getLogger(FaqGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FaqGUI().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        questionComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        answersField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FAQ");
        setName("faqFrame"); // NOI18N

        questionComboBox.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        questionComboBox.setModel(new javax.swing.DefaultComboBoxModel(questions));
        questionComboBox.setToolTipText("Place,where you can select question");
        questionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose question to see answer:");

        answersField.setColumns(20);
        answersField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        answersField.setLineWrap(true);
        answersField.setRows(5);
        answersField.setText(answers[0]);
        answersField.setToolTipText("Place ,where answer are displayed");
        answersField.setWrapStyleWord(true);
        jScrollPane1.setViewportView(answersField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                        .addComponent(questionComboBox, 0, 589, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(questionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void questionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionComboBoxActionPerformed
        answersField.setText(answers[questionComboBox.getSelectedIndex()]);


    }//GEN-LAST:event_questionComboBoxActionPerformed
    // End of variables declaration//GEN-END:variables

    private void setup() {
        FileInputStream fis = null;
        ArrayList<String> question = new ArrayList<String>();
        ArrayList<String> answer = new ArrayList<String>();

        try {
            fis = new FileInputStream("data" + System.getProperty("file.separator") + "message.properties");
            properties.load(fis);
            //validateFAQ();
            for (int i = 0; i < Integer.parseInt(properties.getProperty("faq.counter")); i++) {
                if (properties.getProperty("faq.q." + i) != null && properties.getProperty("faq.a." + i) != null) {
                    question.add(properties.getProperty("faq.q." + i));
                    answer.add(properties.getProperty("faq.a." + i));
                } else {
                    break;
                }

            }
            String[] sq = new String[question.size()];
            String[] sa = new String[answer.size()];
            questions = question.toArray(sq);
            answers = answer.toArray(sa);
        } catch (NumberFormatException ex) {
            LOGGER.warn("Error cause due author screwed up update faq section in message.properties or somebody \"innocent\" had crap idea to mess up with message.properties");
            this.dispose();
        } catch (FileNotFoundException ex) {
            LOGGER.warn("Unexpected error due load properties for About." + ex.getCause() + ("\n" + ex.getMessage()));
            //JOptionPane.showMessageDialog(rootPane, messagePanel, "WOOPS",  JOptionPane.ERROR_MESSAGE);
            this.dispose();
        } catch (IOException ex) {
            LOGGER.warn("Unexpected error due load properties for About." + ex.getCause() + ("\n" + ex.getMessage()));
            this.dispose();
        } finally {
            IOUtils.closeQuietly(fis);
        }
    }

    //TODO implement this method!
    private void validateFAQ() {
        throw new UnsupportedOperationException("Not yet implemented");
    }


}
