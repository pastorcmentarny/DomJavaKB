package dms.pastor.examples.java16;

public class RecordsExample {

    /*
        The DateTimeFormatterBuilder class has a new method, appendDayPeriodText().  This provides a way of formatting the time of day as “in the morning”, “in the afternoon”, etc. rather than just AM or PM

    */

    /*
    There are a couple of exciting changes to the stream API in JDK 16.

    The first is the inclusion of a new terminal operation provided as a default method on the Stream interface.  This is toList(), which accumulates the elements of the stream into an unmodifiable list.  Making the list unmodifiable has prompted some discussion on places like Reddit but seems to be a logical choice.

    The second change is the introduction of mapMulti() as an intermediate operation, again provided as a set of default methods on stream (this includes type-specific ones for double, int and long).  When you first read the description of this operation, it looks identical to flatMap.  It returns a stream consisting of the results of replacing each element of this stream with multiple elements, specifically zero or more elements.  Unlike flatMap(), which effectively concatenates streams generated by each element on the input stream, mapMulti() applies a mapping that can result in multiple elements being produced.  If you were to use mapMulti() to map to zero or one element, it would be the same as a filter operation.  If you used it to map to only one element, it would be the same as a map().  The benefit is when you want to create multiple elements for each input element.  A simple example is shown below:
            1
            wordList.stream()
            2
            .mapMulti((str, consumer) -> {
        3
        for (int i = 0; I < str.length(); i++)
            4
        consumer.accept(str.length());
        5
    })
            6
            .forEach(System.out::print);
            */

}
